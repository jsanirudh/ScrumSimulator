/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.scrumsimulator;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nishalsharvayigari
 */
public class SprintBoard extends javax.swing.JFrame {

    /**
     * Creates new form UserStoriesScreen
     */
    public SprintBoard() {
        initComponents();
        initDB();
        SelectCurrentSprint();
        Sp_No.setText("1");
        ftch.doClick();
    }
    public void initDB(){
        try {
            
            Connection con = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139","sql3659139" ,"ZD2nzaxCwN");
            String query = "UPDATE UserStorySprintData SET Sprint = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1,"");
            pst.executeUpdate();
            pst.close();
            con.close();         
        } catch(Exception e){ // Print the stack trace for better error debugging
             // Print the stack trace for better error debugging
            JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
            System.out.println(e);
        }
    }
    public void SelectCurrentSprint() {
    try {
        Connection con = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139", "sql3659139", "ZD2nzaxCwN");
        String query_velocity_length = "SELECT parameterValue FROM Configurations WHERE parameterName = ?;";
        PreparedStatement pst2 = con.prepareStatement(query_velocity_length);
        pst2.setString(1, "stories");
        ResultSet rs1 = pst2.executeQuery();
        if (rs1.next()) {
            String velocity_stories = rs1.getString("parameterValue");
            System.out.println("Desired Velocity (stories): " + velocity_stories);
            int desired_velocity = Integer.parseInt(velocity_stories);
            String query = "select * from UserStories order by businessValue desc, storyPoints asc";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            int currentVelocity = 0;
            //desired_velocity = 10;
            while (rs.next() && currentVelocity < desired_velocity) {
                String User_ID = rs.getString(1);
                int storyPoints = rs.getInt(6);
                if (currentVelocity <= desired_velocity) {
                    System.out.println("The story "+ User_ID + " is pulled into the current sprint");
                    try {
                    String query2 = "UPDATE UserStorySprintData SET Sprint = ? WHERE id = ?";
                    PreparedStatement pst = con.prepareStatement(query2);
                    pst.setString(1, "1");
                    pst.setString(2, String.valueOf(User_ID));
                    pst.executeUpdate();
                    pst.close();
                    currentVelocity += storyPoints; 
                    //System.out.println("User story with ID: " + User_ID + " and story points: " + storyPoints + " added to Sprint 1");
                    JOptionPane.showMessageDialog(rootPane,"User story with ID: " + User_ID + " and story points: " + storyPoints + " added to Sprint 1\n" +
                            "Total story points added to current sprint: "+currentVelocity);
                    } catch (SQLException e) {
                        System.out.println("SQLException: " + e.getMessage());
                    }
                } else {
                    break;
                }
            }
        } else {
            System.out.println("No configuration found for 'stories'.");
        }
        con.close(); // Close the database connection
    } catch (SQLException e) {
        System.out.println("SQLException: " + e.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scrumBoardTable = new javax.swing.JTable();
        ftch = new javax.swing.JButton();
        Sp_No = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        invisible = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setText("SCRUM SIMULATOR");
        jLabel1.setAlignmentY(0.0F);

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Current Sprint :");

        scrumBoardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "New", "In Progress", "Done", "Blocked"
            }
        ));
        jScrollPane1.setViewportView(scrumBoardTable);

        ftch.setText("Reset");
        ftch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftchActionPerformed(evt);
            }
        });

        jButton1.setText("Simulate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Display Saved State");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Save State");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        invisible.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton5.setText("Burndown Chart");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Reports");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Save Final State");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Display Saved Final State");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Sp_No, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ftch))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invisible, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(55, 55, 55)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap(35, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(Sp_No, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ftch))
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton4)
                            .addComponent(jButton7)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(invisible, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)))
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton6))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ftchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftchActionPerformed
        // TODO add your handling code here:
        
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139","sql3659139" ,"ZD2nzaxCwN");
            String s = Sp_No.getText();
            String query = "select * from UserStories JOIN UserStorySprintData ON UserStories.ID = UserStorySprintData.ID where UserStorySprintData.Sprint = ?";
            userStoriesList = new ArrayList<>();
            burndown1 = new ArrayList();
            burndown2 = new ArrayList();
            String ID, Title, Status, StoryPoints;
            PreparedStatement st = con.prepareStatement(query);
            st.setString(1,s);
            ResultSet rs = st.executeQuery();
            while(rs.next())
            {
                ID = rs.getString(1);
                Title = rs.getString(4);
                Status = rs.getString(2);
                StoryPoints = rs.getString(6);
                UserStoryData userStory = new UserStoryData(ID, Title,StoryPoints, Status);
                userStoriesList.add(userStory);
            }
            st.close();
            con.close();
        } catch(SQLException e){
            System.out.println(e);
        }
        displayTable();
    }//GEN-LAST:event_ftchActionPerformed

    public void displayTable(){
        DefaultTableModel model;
        model =(DefaultTableModel) scrumBoardTable.getModel();
        model.setRowCount(0);
        for (UserStoryData userData : userStoriesList) {
            Object[] row = {null, null, null, null};
            switch (userData.status) {
                case "New":
                    row[0] = "<html>" + "ID: "+ userData.id + "  points: " + userData.storyPoints + "<br>" + userData.title + "</html>";
                    break;
                case "In Progress":
                    row[1] = "<html>" + "ID: "+ userData.id + "  points: " + userData.storyPoints + "<br>" + userData.title + "</html>";
                    break;
                case "Done":
                    row[2] = "<html>" + "ID: "+ userData.id + "  points: " + userData.storyPoints + "<br>" + userData.title + "</html>";
                    break;
                case "Blocked":
                    row[3] = "<html>" + "ID: "+ userData.id + "  points: " + userData.storyPoints + "<br>" + userData.title + "</html>";
                    break;
            }
            model.addRow(row);
        }
//        try {
//            Thread.sleep(1000); // Introduce a 1-second delay
//        } catch (InterruptedException e) {
//            // Handle the interruption
//        }
        for (int row = 0; row < scrumBoardTable.getRowCount(); row++){
            int rowHeight = scrumBoardTable.getRowHeight(row);
            for (int column = 0; column < scrumBoardTable.getColumnCount(); column++){
                Component comp = scrumBoardTable.prepareRenderer(scrumBoardTable.getCellRenderer(row, column), row, column);
                rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
            }
            scrumBoardTable.setRowHeight(row, rowHeight);
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        RefinedBacklogScreen r = new RefinedBacklogScreen();
        r.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        executeSprint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DisplaySaveState s = new DisplaySaveState();
        s.setVisible(true);
        //dispose();
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
        Connection cnc = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139", "sql3659139", "ZD2nzaxCwN");
        DefaultTableModel model = (DefaultTableModel) scrumBoardTable.getModel();
        int rowCount = model.getRowCount();
        String clearQuery = "DELETE FROM IntStateSprint";
        PreparedStatement clearStatement = cnc.prepareStatement(clearQuery);
        clearStatement.executeUpdate();

        for (int i = 0; i < rowCount; i++) {

            Object[] rowData = new Object[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                rowData[j] = model.getValueAt(i, j);
            }
            String insertQuery = "INSERT INTO IntStateSprint (New, InProgress, Done, Blocker) VALUES (?, ?, ?, ?)";
            PreparedStatement insertStatement = cnc.prepareStatement(insertQuery);

            for (int k = 0; k < rowData.length; k++) {
                insertStatement.setObject(k + 1, rowData[k]);
            }

            insertStatement.executeUpdate();
        }
        invisible.setText("Saved the Current State of Sprint board");
        cnc.close();

    } catch (Exception ex) {
        ex.printStackTrace();

    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        BurndownChart b = new BurndownChart(this);
        b.setVisible(true);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {
            Connection cnc = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139", "sql3659139", "ZD2nzaxCwN");
            //DefaultTableModel model = (DefaultTableModel) scrumBoardTable.getModel();
            //int rowCount = model.getRowCount();
            String clearQuery = "DELETE FROM Reports";
            PreparedStatement clearStatement = cnc.prepareStatement(clearQuery);
            clearStatement.executeUpdate();
            String insertQuery = "INSERT INTO Reports (ReportData) VALUES (?)";
            PreparedStatement insertStatement = cnc.prepareStatement(insertQuery);
            String insertString = "After Sprint-1, number of blocked stories are: "+blockedCount;
            insertStatement.setObject(1, insertString);
            insertStatement.executeUpdate();
            cnc.close();

        } catch (Exception ex) {
            ex.printStackTrace();

        }
        ReportsScreen r = new ReportsScreen();
        r.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try {
        Connection cnc = DriverManager.getConnection("jdbc:mysql://sql3.freesqldatabase.com:3306/sql3659139", "sql3659139", "ZD2nzaxCwN");
        DefaultTableModel model = (DefaultTableModel) scrumBoardTable.getModel();
        int rowCount = model.getRowCount();
        String clearQuery = "DELETE FROM FinalSprintState";
        PreparedStatement clearStatement = cnc.prepareStatement(clearQuery);
        clearStatement.executeUpdate();

        for (int i = 0; i < rowCount; i++) {

            Object[] rowData = new Object[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                rowData[j] = model.getValueAt(i, j);
            }
            String insertQuery = "INSERT INTO FinalSprintState (New, InProgress, Done, Blocker) VALUES (?, ?, ?, ?)";
            PreparedStatement insertStatement = cnc.prepareStatement(insertQuery);

            for (int k = 0; k < rowData.length; k++) {
                insertStatement.setObject(k + 1, rowData[k]);
            }

            insertStatement.executeUpdate();
        }
        invisible.setText("Saved the Final State of Sprint board");
        cnc.close();

    } catch (Exception ex) {
        ex.printStackTrace();

    }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        DisplayFinalSaveState s = new DisplayFinalSaveState();
        s.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    public void executeSprint() {
        Random random = new Random();
        blockedCount = 0;
        int size = userStoriesList.size();
        int[] pointsLeft = {0};
        int[] relativepointsLeft = {0};
        for(int x = 0; x < size; x++) {
            pointsLeft[0] += Integer.parseInt(userStoriesList.get(x).storyPoints);
        }
        System.out.println("points: "+ pointsLeft[0]);
        burndown1.add(pointsLeft[0]);
        burndown2.add(pointsLeft[0]);
        relativepointsLeft[0] = pointsLeft[0];
        int[] i = {0};
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (i[0]<size) {
                    int roll = random.nextInt(6) + 1;
                    int stories = Integer.parseInt(userStoriesList.get(i[0]).storyPoints);
                    if ("New".equals(userStoriesList.get(i[0]).status)) {
                        userStoriesList.get(i[0]).status = "In Progress";
                        displayTable();
                    } else if (roll == 6) {
                        userStoriesList.get(i[0]).status = "Blocked";
                        //userStoriesList.get(i[0]).storyPoints = "0";
                        burndown1.add(pointsLeft[0]);
                        burndown2.add(relativepointsLeft[0]);
                        displayTable();
                        blockedCount++;
                        i[0]++;
                        
                    } else if (roll >= stories) {
                        userStoriesList.get(i[0]).status = "Done";
                        userStoriesList.get(i[0]).storyPoints = "0";
                        pointsLeft[0] = pointsLeft[0] - stories;
                        relativepointsLeft[0] = pointsLeft[0];
                        burndown1.add(pointsLeft[0]);
                        burndown2.add(relativepointsLeft[0]);
                        displayTable();
                        i[0]++;
                    } else {
                        stories -= roll;
                        userStoriesList.get(i[0]).status = "In Progress";
                        userStoriesList.get(i[0]).storyPoints = String.valueOf(stories);
                        pointsLeft[0] = pointsLeft[0] - roll;
                        burndown1.add(pointsLeft[0]);
                        burndown2.add(relativepointsLeft[0]);
                        displayTable();
                    }

                }
                else {
                    JOptionPane.showMessageDialog(rootPane, "Sprint-1 simulation completed successfully.");
                    //bCount = blockedCount[0];
                    for (int item : burndown1) {
                        System.out.println(item);
                    }
                    for (int item : burndown2) {
                        System.out.println(item);
                    }
                    ((Timer) e.getSource()).stop();
                }
            }
        });
        timer.start();
        
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SprintBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SprintBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SprintBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SprintBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SprintBoard().setVisible(true);
//            }
//        });
//    }
    public List<UserStoryData> getUserStoriesList() {
        return userStoriesList;
    }
    private List<UserStoryData> userStoriesList;
    public ArrayList<Integer> burndown1;
    public ArrayList<Integer> burndown2;
    int blockedCount;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Sp_No;
    private javax.swing.JButton ftch;
    private javax.swing.JLabel invisible;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable scrumBoardTable;
    // End of variables declaration//GEN-END:variables
}
